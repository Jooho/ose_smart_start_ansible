---
- name: Delete test result File
  file: path={{regression_result_path}}/{{ item }} state=absent force=yes
  run_once: true
  with_items:
     - "{{ role_path|basename }}_result_1"
     - "{{ role_path|basename }}_raw_1"
  delegate_to: localhost

- name: Create test result File
  file: path={{regression_result_path}}/{{ item }} state=touch
  run_once: true
  with_items:
     - "{{ role_path|basename }}_result_1"
     - "{{ role_path|basename }}_raw_1"
  delegate_to: localhost

- name: Check if squid service is runnig
  service: name=squid state=started
  register: is_squid_service_runnig
  when: '"{{inventory_hostname}}" == "{{item}}"'
  with_items:
     - "{{squid_vms|default(omit)}}"

- name: oc login to OCP
  shell: "oc login -u '{{oc_login.user_id}}' -p '{{oc_login_password}}' --insecure-skip-tls-verify --server={{oc_login.url}}"
  run_once: yes
  delegate_to: "{{ groups.masters.0 if remote_test_host == ' ' else remote_test_host}}"

- name: Check if Service for squid
  shell: "oc get svc -n default|grep squid"
  run_once: true
  delegate_to: "{{ groups.masters.0 if remote_test_host == ' ' else remote_test_host}}"
  register: does_squid_svc_exist
  ignore_errors: true

- name: Check if Endpoint for squid
  shell: "oc get ep -n default|grep squid"
  run_once: true
  delegate_to: "{{ groups.masters.0 if remote_test_host == ' ' else remote_test_host}}"
  register: does_squid_ep_exist
  ignore_errors: true

- name: Filter result data for squid package
  shell: echo "{{item.item}} {{'FAIL' if item.state != 'started' else 'SUCCESS'}}" >>  {{regression_result_path}}/{{role_path|basename}}_raw_1
  when: ({{item.skipped is not defined}})
  with_items:
     - "{{is_squid_service_runnig.results}}"
  delegate_to: localhost

- name: Sort result data for squid package
  shell: sort {{regression_result_path}}/{{role_path|basename}}_raw_1  -o {{regression_result_path}}/{{role_path|basename}}_result_1
  run_once: true
  delegate_to: localhost

- name: Filter result data for svc
  shell: echo squid-svc $(echo {{does_squid_svc_exist.stdout}}|awk '{print $2}') {{'FAIL' if does_squid_svc_exist.stdout == '' else 'SUCCESS'}}   >> {{regression_result_path}}/{{role_path|basename}}_result_1
  run_once: true
  delegate_to: localhost

- name: Filter result data for ep
  shell: echo squid-endpoint  $(echo {{does_squid_ep_exist.stdout}}|awk '{print $2}') {{'FAIL' if does_squid_ep_exist.stdout == '' else 'SUCCESS'}}   >> {{regression_result_path}}/{{role_path|basename}}_result_1 
  run_once: true
  delegate_to: localhost

- name: Generate report rule
  template: src=report_rule.json.j2 dest={{regression_result_path}}/{{ role_path|basename }}_rule
  delegate_to: localhost

